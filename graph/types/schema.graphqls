schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

# The Query type represents all of the entry points into the API.
type Query {
  discussion(id: ID!): Discussion
  discussionByLinkSlug(slug: String!): Discussion
  listDiscussions(state: DiscussionUserAccessState! = ACTIVE): [Discussion!]
  # Need to add verification that the caller is the user.
  user(id: ID!): User!
  me: User!

}

input UpdateParticipantInput {
  gradientColor: GradientColor
  isUnsetGradient: Boolean
  isAnonymous: Boolean
  hasJoined: Boolean
}

input AddDiscussionParticipantInput {
  gradientColor: GradientColor
  hasJoined: Boolean
  isAnonymous: Boolean!
}

input PostContentInput {
  postText: String!,
  postType: PostType!,
  mentionedEntities:[String!],
  quotedPostID: ID,
  mediaID: ID,
  preview: String
}

input DiscussionInput {
  anonymityType: AnonymityType
  title: String
  description: String
  publicAccess: Boolean
  iconURL: String
  discussionJoinability: DiscussionJoinabilitySetting
  lockStatus: Boolean
}

input DiscussionCreationSettings {
  discussionJoinability: DiscussionJoinabilitySetting!
}

input DiscussionUserSettings {
  state: DiscussionUserAccessState
  notifSetting: DiscussionUserNotificationSetting
}

type Mutation {
  addDiscussionParticipant(discussionID: String!, userID: String!, discussionParticipantInput: AddDiscussionParticipantInput!): Participant!
  addPost(discussionID: ID!, participantID: ID!, postContent: PostContentInput!): Post!
  # We need to deprecate `publicAccess` but given it's being used by existing apps let's keep it there for now.
  # A note though that we should do this very soon.
  createDiscussion(anonymityType: AnonymityType!, title: String!, description: String, publicAccess: Boolean = true, discussionSettings: DiscussionCreationSettings!): Discussion!

  # A slight misnomer here because this will be a copy-on-write. The participant
  # object actually is immutable.
  updateParticipant(discussionID: ID!, participantID: ID!, updateInput: UpdateParticipantInput!): Participant!

  # Upsert user device
  upsertUserDevice(userID: ID, platform: Platform!, deviceID: String!, token: String): UserDevice!

  updateDiscussion(discussionID: ID!, input: DiscussionInput!): Discussion!
  updateDiscussionUserSettings(discussionID: ID!, settings: DiscussionUserSettings!): DiscussionUserAccess!

  requestAccessToDiscussion(discussionID: ID!): DiscussionAccessRequest!
  respondToRequestAccess(requestID: ID!, response: InviteRequestStatus!): DiscussionAccessRequest!

  # Posts
  deletePost(discussionID: ID!, postID: ID!): Post!

  # Banning
  banParticipant(discussionID: ID!, participantID: ID!): Participant!

  shuffleDiscussion(discussionID: ID!, inFutureSeconds: Int): Discussion!

  # Viewer
  setLastPostViewed(viewerID: ID!, postID: ID!): Viewer!

  # Muting
  muteParticipants(discussionID: ID!, participantIDs: [ID!]!, mutedForSeconds: Int!): [Participant!]!
  unmuteParticipants(discussionID: ID!, participantIDs: [ID!]!): [Participant!]!
}

type Subscription {
  postAdded(discussionID: String!): Post
  onDiscussionEvent(discussionID: String!): DiscussionSubscriptionEvent
}
