schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

# The Query type represents all of the entry points into the API.
type Query {
  discussion(id: ID!): Discussion
  listDiscussions: [Discussion!]
  flairTemplates(query: String): [FlairTemplate!]
  # Need to add verification that the caller is the user.
  user(id: ID!): User!
  me: User!
}

input UpdateParticipantInput {
  gradientColor: GradientColor
  isUnsetGradient: Boolean
  flairID: ID
  isUnsetFlairID: Boolean
  isAnonymous: Boolean
  hasJoined: Boolean
}

input AddDiscussionParticipantInput {
  gradientColor: GradientColor
  flairID: ID
  hasJoined: Boolean
  isAnonymous: Boolean!
}

# TODO: implement
input MediaInput {
  type: String!,
  mediaID: ID!
}

# TODO: implement
input PollInput {
  pollText: String!,
  duration: Time!,
  option1: String!,
  option2: String!,
  option3: String,
  option4: String
}

input PostContentInput {
  postText: String!,
  mentionedUserIDs:[ID!],
  quotedPostID: ID
  media: MediaInput,
  poll: PollInput
}


type Mutation {
  addDiscussionParticipant(discussionID: String!, userID: String!, discussionParticipantInput: AddDiscussionParticipantInput!): Participant!
  addPost(discussionID: ID!, postContent: PostContentInput!): Post
  createDiscussion(anonymityType: AnonymityType!, title: String!): Discussion!

  # Creates a User Flair from a Flair template, accessible via available flair
  createFlair(userID: String!, templateID: String!): Flair!
  # Removes a User Flair from a user's available flair
  removeFlair(id: String!): Flair!

  # Assigns a User Flair to a Participant
  assignFlair(participantID: String!, flairID: String!): Participant!
  # Removes a User Flair from a Participant
  unassignFlair(participantID: String!): Participant!

  # Creates a new flair template
  createFlairTemplate(displayName: String, imageURL: String, source: String!): FlairTemplate!
  # Removes a flair template
  removeFlairTemplate(id: String!): FlairTemplate!

  # A slight misnomer here because this will be a copy-on-write. The participant
  # object actually is immutable.
  updateParticipant(participantID: ID!, updateInput: UpdateParticipantInput!): Participant!

  # Upsert user device
  upsertUserDevice(userID: ID, platform: Platform!, deviceID: String!, token: String): UserDevice!
}

type Subscription {
  postAdded(discussionID: String!): Post
}
