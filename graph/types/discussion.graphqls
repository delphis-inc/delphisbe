type Discussion implements Entity {
    # Unique id for this discussion
    id: ID!
    # We do not link to the user themselves, only the moderator view of a user.
    # This is for anonymity.
    moderator: Moderator!
    # Anonymity type is currently not implemented beyond publicly viewable content.
    anonymityType: AnonymityType!
    
    # A link to all posts in the discussion, ordered chronologically.
    posts: [Post!]
    postsConnection(after: ID): PostsConnection!

    iconURL: String

    # Participants
    participants: [Participant!]

    title: String!
    description: String!

    titleHistory: [HistoricalString!]
    descriptionHistory: [HistoricalString!]

    createdAt: String!
    updatedAt: String!

    # Will return information based on the logged in user
    meParticipant: Participant

    # Will return available participants for `me`
    meAvailableParticipants: [Participant!]

    meCanJoinDiscussion: CanJoinDiscussionResponse!

    meViewer: Viewer
    # Notification setting for logged in user
    meNotificationSettings: DiscussionUserNotificationSetting
    meDiscussionStatus: DiscussionUserAccessState

    accessRequests: [DiscussionAccessRequest!]

    discussionAccessLink: DiscussionAccessLink

    discussionJoinability: DiscussionJoinabilitySetting!

    shuffleCount: Int!
    secondsUntilShuffle: Int

    lockStatus: Boolean!

    archive: DiscussionArchive
}

type CanJoinDiscussionResponse {
    response: DiscussionJoinabilityResponse!
    reason: String
    reasonCode: Int
}

type HistoricalString {
    value: String!
    createdAt: Time!
}

type DiscussionArchive {
    archive: String!
    createdAt: Time!
}

type DiscussionAccessRequest {
    id: ID!
    userProfile: UserProfile
    discussion: Discussion!
    createdAt: String!
    updatedAt: String!
    isDeleted: Boolean!
    status: InviteRequestStatus!
}

type DiscussionAccessLink {
    discussion: Discussion!
    linkSlug: String!
    url: String!
    createdAt: Time!
    updatedAt: Time!
    isDeleted: Boolean!
}

type DiscussionUserAccess{
    discussion: Discussion!
    user: User!
    state: DiscussionUserAccessState!
    createdAt: Time!
    updatedAt: Time!
    isDeleted: Boolean!
    request: DiscussionAccessRequest
}

# type DiscussionsConnection {
#     totalCount: Int!
#     edges: [DiscussionsEdge]
#     pageInfo: PageInfo!
# }

# type DiscussionsEdge {
#     cursor: ID!
#     node: Discussion
# }
