type Discussion implements Entity {
    # Unique id for this discussion
    id: ID!
    # We do not link to the user themselves, only the moderator view of a user.
    # This is for anonymity.
    moderator: Moderator!
    # Anonymity type is currently not implemented beyond publicly viewable content.
    anonymityType: AnonymityType!
    
    # A link to all posts in the discussion, ordered chronologically.
    posts: [Post!]
    postsConnection(after: ID): PostsConnection!

    iconURL: String

    # Participants
    participants: [Participant!]

    title: String!
    description: String!

    titleHistory: [HistoricalString!]
    descriptionHistory: [HistoricalString!]

    createdAt: String!
    updatedAt: String!

    # Will return information based on the logged in user
    meParticipant: Participant

    # Will return available participants for `me`
    meAvailableParticipants: [Participant!]

    meCanJoinDiscussion: CanJoinDiscussionResponse!

    autoPost: Boolean!
    idleMinutes: Int!
    tags: [Tag!]
    upcomingContent: [ImportedContent!]
    flairTemplates: [FlairTemplate!] @deprecated(reason: "removed flair template access")
    accessRequests: [DiscussionAccessRequest!]
    discussionLinksAccess: DiscussionLinkAccess! @deprecated(reason: "user DiscussionAccessLink")

    discussionAccessLink: DiscussionAccessLink!

    discussionJoinability: DiscussionJoinabilitySetting!
}

type CanJoinDiscussionResponse {
    response: DiscussionJoinabilityResponse!
    reason: String
    reasonCode: Int
}

type HistoricalString {
    value: String!
    createdAt: Time!
}

type Tag {
    id: ID!
    createdAt: String!
    tag: String!
    isDeleted: Boolean!
}

type DiscussionFlairTemplateAccess {
    id: ID!
    discussion: Discussion!
    flairTemplate: FlairTemplate!
    createdAt: String!
    updatedAt: String!
    isDeleted: Boolean!
}

type DiscussionInvite {
    id: ID!
    discussion: Discussion!
    invitingParticipant: Participant!
    createdAt: String!
    updatedAt: String!
    isDeleted: Boolean!
    status: InviteRequestStatus!
}

type DiscussionAccessRequest {
    id: ID!
    user: User!
    discussion: Discussion!
    createdAt: String!
    updatedAt: String!
    isDeleted: Boolean!
    status: InviteRequestStatus!
}

type DiscussionLinkAccess {
    discussionID: ID!
    inviteLinkURL: String!
    vipInviteLinkURL: String!
    createdAt: String!
    updatedAt: String!
    isDeleted: Boolean!
}

type DiscussionAccessLink {
    discussion: Discussion!
    linkSlug: String!
    createdAt: Time!
    updatedAt: Time!
    isDeleted: Boolean!
}

# type DiscussionsConnection {
#     totalCount: Int!
#     edges: [DiscussionsEdge]
#     pageInfo: PageInfo!
# }

# type DiscussionsEdge {
#     cursor: ID!
#     node: Discussion
# }
