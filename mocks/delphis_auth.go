// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import auth "github.com/delphis-inc/delphisbe/internal/auth"
import context "context"
import mock "github.com/stretchr/testify/mock"

// DelphisAuth is an autogenerated mock type for the DelphisAuth type
type DelphisAuth struct {
	mock.Mock
}

// NewAccessToken provides a mock function with given fields: userID
func (_m *DelphisAuth) NewAccessToken(userID string) (*auth.DelphisAccessToken, error) {
	ret := _m.Called(userID)

	var r0 *auth.DelphisAccessToken
	if rf, ok := ret.Get(0).(func(string) *auth.DelphisAccessToken); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.DelphisAccessToken)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRefreshToken provides a mock function with given fields: userID
func (_m *DelphisAuth) NewRefreshToken(userID string) (*auth.DelphisRefreshToken, error) {
	ret := _m.Called(userID)

	var r0 *auth.DelphisRefreshToken
	if rf, ok := ret.Get(0).(func(string) *auth.DelphisRefreshToken); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.DelphisRefreshToken)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateAccessToken provides a mock function with given fields: ctx, token
func (_m *DelphisAuth) ValidateAccessToken(ctx context.Context, token string) (*auth.DelphisAuthedUser, error) {
	ret := _m.Called(ctx, token)

	var r0 *auth.DelphisAuthedUser
	if rf, ok := ret.Get(0).(func(context.Context, string) *auth.DelphisAuthedUser); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.DelphisAuthedUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateRefreshToken provides a mock function with given fields: ctx, token
func (_m *DelphisAuth) ValidateRefreshToken(ctx context.Context, token string) (*auth.DelphisRefreshTokenUser, error) {
	ret := _m.Called(ctx, token)

	var r0 *auth.DelphisRefreshTokenUser
	if rf, ok := ret.Get(0).(func(context.Context, string) *auth.DelphisRefreshTokenUser); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.DelphisRefreshTokenUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
