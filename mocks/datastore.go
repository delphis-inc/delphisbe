// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	datastore "github.com/delphis-inc/delphisbe/internal/datastore"
	mock "github.com/stretchr/testify/mock"

	model "github.com/delphis-inc/delphisbe/graph/model"

	sql "database/sql"

	time "time"
)

// Datastore is an autogenerated mock type for the Datastore type
type Datastore struct {
	mock.Mock
}

// AccessRequestIterCollect provides a mock function with given fields: ctx, iter
func (_m *Datastore) AccessRequestIterCollect(ctx context.Context, iter datastore.DiscussionAccessRequestIter) ([]*model.DiscussionAccessRequest, error) {
	ret := _m.Called(ctx, iter)

	var r0 []*model.DiscussionAccessRequest
	if rf, ok := ret.Get(0).(func(context.Context, datastore.DiscussionAccessRequestIter) []*model.DiscussionAccessRequest); ok {
		r0 = rf(ctx, iter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.DiscussionAccessRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, datastore.DiscussionAccessRequestIter) error); ok {
		r1 = rf(ctx, iter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssignFlair provides a mock function with given fields: ctx, participant, flairID
func (_m *Datastore) AssignFlair(ctx context.Context, participant model.Participant, flairID *string) (*model.Participant, error) {
	ret := _m.Called(ctx, participant, flairID)

	var r0 *model.Participant
	if rf, ok := ret.Get(0).(func(context.Context, model.Participant, *string) *model.Participant); ok {
		r0 = rf(ctx, participant, flairID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Participant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Participant, *string) error); ok {
		r1 = rf(ctx, participant, flairID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeginTx provides a mock function with given fields: ctx
func (_m *Datastore) BeginTx(ctx context.Context) (*sql.Tx, error) {
	ret := _m.Called(ctx)

	var r0 *sql.Tx
	if rf, ok := ret.Get(0).(func(context.Context) *sql.Tx); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Tx)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommitTx provides a mock function with given fields: ctx, tx
func (_m *Datastore) CommitTx(ctx context.Context, tx *sql.Tx) error {
	ret := _m.Called(ctx, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx) error); ok {
		r0 = rf(ctx, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateModerator provides a mock function with given fields: ctx, moderator
func (_m *Datastore) CreateModerator(ctx context.Context, moderator model.Moderator) (*model.Moderator, error) {
	ret := _m.Called(ctx, moderator)

	var r0 *model.Moderator
	if rf, ok := ret.Get(0).(func(context.Context, model.Moderator) *model.Moderator); ok {
		r0 = rf(ctx, moderator)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Moderator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Moderator) error); ok {
		r1 = rf(ctx, moderator)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrUpdateUserProfile provides a mock function with given fields: ctx, userProfile
func (_m *Datastore) CreateOrUpdateUserProfile(ctx context.Context, userProfile model.UserProfile) (*model.UserProfile, bool, error) {
	ret := _m.Called(ctx, userProfile)

	var r0 *model.UserProfile
	if rf, ok := ret.Get(0).(func(context.Context, model.UserProfile) *model.UserProfile); ok {
		r0 = rf(ctx, userProfile)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserProfile)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(context.Context, model.UserProfile) bool); ok {
		r1 = rf(ctx, userProfile)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, model.UserProfile) error); ok {
		r2 = rf(ctx, userProfile)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeleteAllParticipantPosts provides a mock function with given fields: ctx, discussionID, participantID, deletedReasonCode
func (_m *Datastore) DeleteAllParticipantPosts(ctx context.Context, discussionID string, participantID string, deletedReasonCode model.PostDeletedReason) (int, error) {
	ret := _m.Called(ctx, discussionID, participantID, deletedReasonCode)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, string, string, model.PostDeletedReason) int); ok {
		r0 = rf(ctx, discussionID, participantID, deletedReasonCode)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, model.PostDeletedReason) error); ok {
		r1 = rf(ctx, discussionID, participantID, deletedReasonCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDiscussionUserAccess provides a mock function with given fields: ctx, tx, discussionID, userID
func (_m *Datastore) DeleteDiscussionUserAccess(ctx context.Context, tx *sql.Tx, discussionID string, userID string) (*model.DiscussionUserAccess, error) {
	ret := _m.Called(ctx, tx, discussionID, userID)

	var r0 *model.DiscussionUserAccess
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, string, string) *model.DiscussionUserAccess); ok {
		r0 = rf(ctx, tx, discussionID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DiscussionUserAccess)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, string, string) error); ok {
		r1 = rf(ctx, tx, discussionID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePostByID provides a mock function with given fields: ctx, postID, deletedReasonCode
func (_m *Datastore) DeletePostByID(ctx context.Context, postID string, deletedReasonCode model.PostDeletedReason) (*model.Post, error) {
	ret := _m.Called(ctx, postID, deletedReasonCode)

	var r0 *model.Post
	if rf, ok := ret.Get(0).(func(context.Context, string, model.PostDeletedReason) *model.Post); ok {
		r0 = rf(ctx, postID, deletedReasonCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, model.PostDeletedReason) error); ok {
		r1 = rf(ctx, postID, deletedReasonCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DiscussionIterCollect provides a mock function with given fields: ctx, iter
func (_m *Datastore) DiscussionIterCollect(ctx context.Context, iter datastore.DiscussionIter) ([]*model.Discussion, error) {
	ret := _m.Called(ctx, iter)

	var r0 []*model.Discussion
	if rf, ok := ret.Get(0).(func(context.Context, datastore.DiscussionIter) []*model.Discussion); ok {
		r0 = rf(ctx, iter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Discussion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, datastore.DiscussionIter) error); ok {
		r1 = rf(ctx, iter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DuaIterCollect provides a mock function with given fields: ctx, iter
func (_m *Datastore) DuaIterCollect(ctx context.Context, iter datastore.DiscussionUserAccessIter) ([]*model.DiscussionUserAccess, error) {
	ret := _m.Called(ctx, iter)

	var r0 []*model.DiscussionUserAccess
	if rf, ok := ret.Get(0).(func(context.Context, datastore.DiscussionUserAccessIter) []*model.DiscussionUserAccess); ok {
		r0 = rf(ctx, iter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.DiscussionUserAccess)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, datastore.DiscussionUserAccessIter) error); ok {
		r1 = rf(ctx, iter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccessLinkByDiscussionID provides a mock function with given fields: ctx, discussionID
func (_m *Datastore) GetAccessLinkByDiscussionID(ctx context.Context, discussionID string) (*model.DiscussionAccessLink, error) {
	ret := _m.Called(ctx, discussionID)

	var r0 *model.DiscussionAccessLink
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.DiscussionAccessLink); ok {
		r0 = rf(ctx, discussionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DiscussionAccessLink)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, discussionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccessLinkBySlug provides a mock function with given fields: ctx, slug
func (_m *Datastore) GetAccessLinkBySlug(ctx context.Context, slug string) (*model.DiscussionAccessLink, error) {
	ret := _m.Called(ctx, slug)

	var r0 *model.DiscussionAccessLink
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.DiscussionAccessLink); ok {
		r0 = rf(ctx, slug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DiscussionAccessLink)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDUAForEverythingNotifications provides a mock function with given fields: ctx, discussionID, userID
func (_m *Datastore) GetDUAForEverythingNotifications(ctx context.Context, discussionID string, userID string) datastore.DiscussionUserAccessIter {
	ret := _m.Called(ctx, discussionID, userID)

	var r0 datastore.DiscussionUserAccessIter
	if rf, ok := ret.Get(0).(func(context.Context, string, string) datastore.DiscussionUserAccessIter); ok {
		r0 = rf(ctx, discussionID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(datastore.DiscussionUserAccessIter)
		}
	}

	return r0
}

// GetDUAForMentionNotifications provides a mock function with given fields: ctx, discussionID, userID, mentionedUserIDs
func (_m *Datastore) GetDUAForMentionNotifications(ctx context.Context, discussionID string, userID string, mentionedUserIDs []string) datastore.DiscussionUserAccessIter {
	ret := _m.Called(ctx, discussionID, userID, mentionedUserIDs)

	var r0 datastore.DiscussionUserAccessIter
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string) datastore.DiscussionUserAccessIter); ok {
		r0 = rf(ctx, discussionID, userID, mentionedUserIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(datastore.DiscussionUserAccessIter)
		}
	}

	return r0
}

// GetDiscussionAccessRequestByDiscussionIDUserID provides a mock function with given fields: ctx, discussionID, userID
func (_m *Datastore) GetDiscussionAccessRequestByDiscussionIDUserID(ctx context.Context, discussionID string, userID string) (*model.DiscussionAccessRequest, error) {
	ret := _m.Called(ctx, discussionID, userID)

	var r0 *model.DiscussionAccessRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.DiscussionAccessRequest); ok {
		r0 = rf(ctx, discussionID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DiscussionAccessRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, discussionID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDiscussionAccessRequestsByDiscussionID provides a mock function with given fields: ctx, discussionID
func (_m *Datastore) GetDiscussionAccessRequestsByDiscussionID(ctx context.Context, discussionID string) datastore.DiscussionAccessRequestIter {
	ret := _m.Called(ctx, discussionID)

	var r0 datastore.DiscussionAccessRequestIter
	if rf, ok := ret.Get(0).(func(context.Context, string) datastore.DiscussionAccessRequestIter); ok {
		r0 = rf(ctx, discussionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(datastore.DiscussionAccessRequestIter)
		}
	}

	return r0
}

// GetDiscussionArchiveByDiscussionID provides a mock function with given fields: ctx, discussionID
func (_m *Datastore) GetDiscussionArchiveByDiscussionID(ctx context.Context, discussionID string) (*model.DiscussionArchive, error) {
	ret := _m.Called(ctx, discussionID)

	var r0 *model.DiscussionArchive
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.DiscussionArchive); ok {
		r0 = rf(ctx, discussionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DiscussionArchive)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, discussionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDiscussionByID provides a mock function with given fields: ctx, id
func (_m *Datastore) GetDiscussionByID(ctx context.Context, id string) (*model.Discussion, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.Discussion
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Discussion); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Discussion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDiscussionByLinkSlug provides a mock function with given fields: ctx, slug
func (_m *Datastore) GetDiscussionByLinkSlug(ctx context.Context, slug string) (*model.Discussion, error) {
	ret := _m.Called(ctx, slug)

	var r0 *model.Discussion
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Discussion); ok {
		r0 = rf(ctx, slug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Discussion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDiscussionByModeratorID provides a mock function with given fields: ctx, moderatorID
func (_m *Datastore) GetDiscussionByModeratorID(ctx context.Context, moderatorID string) (*model.Discussion, error) {
	ret := _m.Called(ctx, moderatorID)

	var r0 *model.Discussion
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Discussion); ok {
		r0 = rf(ctx, moderatorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Discussion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, moderatorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDiscussionRequestAccessByID provides a mock function with given fields: ctx, id
func (_m *Datastore) GetDiscussionRequestAccessByID(ctx context.Context, id string) (*model.DiscussionAccessRequest, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.DiscussionAccessRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.DiscussionAccessRequest); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DiscussionAccessRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDiscussionUserAccess provides a mock function with given fields: ctx, discussionID, userID
func (_m *Datastore) GetDiscussionUserAccess(ctx context.Context, discussionID string, userID string) (*model.DiscussionUserAccess, error) {
	ret := _m.Called(ctx, discussionID, userID)

	var r0 *model.DiscussionUserAccess
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.DiscussionUserAccess); ok {
		r0 = rf(ctx, discussionID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DiscussionUserAccess)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, discussionID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDiscussionsByIDs provides a mock function with given fields: ctx, ids
func (_m *Datastore) GetDiscussionsByIDs(ctx context.Context, ids []string) (map[string]*model.Discussion, error) {
	ret := _m.Called(ctx, ids)

	var r0 map[string]*model.Discussion
	if rf, ok := ret.Get(0).(func(context.Context, []string) map[string]*model.Discussion); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*model.Discussion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDiscussionsByUserAccess provides a mock function with given fields: ctx, userID, state
func (_m *Datastore) GetDiscussionsByUserAccess(ctx context.Context, userID string, state model.DiscussionUserAccessState) datastore.DiscussionIter {
	ret := _m.Called(ctx, userID, state)

	var r0 datastore.DiscussionIter
	if rf, ok := ret.Get(0).(func(context.Context, string, model.DiscussionUserAccessState) datastore.DiscussionIter); ok {
		r0 = rf(ctx, userID, state)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(datastore.DiscussionIter)
		}
	}

	return r0
}

// GetDiscussionsToBeShuffledBeforeTime provides a mock function with given fields: ctx, tx, epoc
func (_m *Datastore) GetDiscussionsToBeShuffledBeforeTime(ctx context.Context, tx *sql.Tx, epoc time.Time) ([]model.Discussion, error) {
	ret := _m.Called(ctx, tx, epoc)

	var r0 []model.Discussion
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, time.Time) []model.Discussion); ok {
		r0 = rf(ctx, tx, epoc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Discussion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, time.Time) error); ok {
		r1 = rf(ctx, tx, epoc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastPostByDiscussionID provides a mock function with given fields: ctx, discussionID
func (_m *Datastore) GetLastPostByDiscussionID(ctx context.Context, discussionID string) (*model.Post, error) {
	ret := _m.Called(ctx, discussionID)

	var r0 *model.Post
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Post); ok {
		r0 = rf(ctx, discussionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, discussionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMediaRecordByID provides a mock function with given fields: ctx, mediaID
func (_m *Datastore) GetMediaRecordByID(ctx context.Context, mediaID string) (*model.Media, error) {
	ret := _m.Called(ctx, mediaID)

	var r0 *model.Media
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Media); ok {
		r0 = rf(ctx, mediaID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Media)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, mediaID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModeratedDiscussionsByUserID provides a mock function with given fields: ctx, userID
func (_m *Datastore) GetModeratedDiscussionsByUserID(ctx context.Context, userID string) datastore.DiscussionIter {
	ret := _m.Called(ctx, userID)

	var r0 datastore.DiscussionIter
	if rf, ok := ret.Get(0).(func(context.Context, string) datastore.DiscussionIter); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(datastore.DiscussionIter)
		}
	}

	return r0
}

// GetModeratorByID provides a mock function with given fields: ctx, id
func (_m *Datastore) GetModeratorByID(ctx context.Context, id string) (*model.Moderator, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.Moderator
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Moderator); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Moderator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModeratorByUserID provides a mock function with given fields: ctx, id
func (_m *Datastore) GetModeratorByUserID(ctx context.Context, id string) (*model.Moderator, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.Moderator
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Moderator); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Moderator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModeratorByUserIDAndDiscussionID provides a mock function with given fields: ctx, userID, discussionID
func (_m *Datastore) GetModeratorByUserIDAndDiscussionID(ctx context.Context, userID string, discussionID string) (*model.Moderator, error) {
	ret := _m.Called(ctx, userID, discussionID)

	var r0 *model.Moderator
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.Moderator); ok {
		r0 = rf(ctx, userID, discussionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Moderator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, discussionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModeratorParticipantsByDiscussionID provides a mock function with given fields: ctx, discussionID
func (_m *Datastore) GetModeratorParticipantsByDiscussionID(ctx context.Context, discussionID string) ([]model.Participant, error) {
	ret := _m.Called(ctx, discussionID)

	var r0 []model.Participant
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.Participant); ok {
		r0 = rf(ctx, discussionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Participant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, discussionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNextShuffleTimeForDiscussionID provides a mock function with given fields: ctx, id
func (_m *Datastore) GetNextShuffleTimeForDiscussionID(ctx context.Context, id string) (*model.DiscussionShuffleTime, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.DiscussionShuffleTime
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.DiscussionShuffleTime); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DiscussionShuffleTime)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetParticipantByID provides a mock function with given fields: ctx, participantID
func (_m *Datastore) GetParticipantByID(ctx context.Context, participantID string) (*model.Participant, error) {
	ret := _m.Called(ctx, participantID)

	var r0 *model.Participant
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Participant); ok {
		r0 = rf(ctx, participantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Participant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, participantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetParticipantsByDiscussionID provides a mock function with given fields: ctx, id
func (_m *Datastore) GetParticipantsByDiscussionID(ctx context.Context, id string) ([]model.Participant, error) {
	ret := _m.Called(ctx, id)

	var r0 []model.Participant
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.Participant); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Participant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetParticipantsByDiscussionIDUserID provides a mock function with given fields: ctx, discussionID, userID
func (_m *Datastore) GetParticipantsByDiscussionIDUserID(ctx context.Context, discussionID string, userID string) ([]model.Participant, error) {
	ret := _m.Called(ctx, discussionID, userID)

	var r0 []model.Participant
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []model.Participant); ok {
		r0 = rf(ctx, discussionID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Participant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, discussionID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetParticipantsByIDs provides a mock function with given fields: ctx, ids
func (_m *Datastore) GetParticipantsByIDs(ctx context.Context, ids []string) (map[string]*model.Participant, error) {
	ret := _m.Called(ctx, ids)

	var r0 map[string]*model.Participant
	if rf, ok := ret.Get(0).(func(context.Context, []string) map[string]*model.Participant); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*model.Participant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPostByID provides a mock function with given fields: ctx, postID
func (_m *Datastore) GetPostByID(ctx context.Context, postID string) (*model.Post, error) {
	ret := _m.Called(ctx, postID)

	var r0 *model.Post
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Post); ok {
		r0 = rf(ctx, postID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPostContentByID provides a mock function with given fields: ctx, id
func (_m *Datastore) GetPostContentByID(ctx context.Context, id string) (*model.PostContent, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.PostContent
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.PostContent); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PostContent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPostsByDiscussionIDFromCursorIter provides a mock function with given fields: ctx, discussionID, cursor, limit
func (_m *Datastore) GetPostsByDiscussionIDFromCursorIter(ctx context.Context, discussionID string, cursor string, limit int) datastore.PostIter {
	ret := _m.Called(ctx, discussionID, cursor, limit)

	var r0 datastore.PostIter
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) datastore.PostIter); ok {
		r0 = rf(ctx, discussionID, cursor, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(datastore.PostIter)
		}
	}

	return r0
}

// GetPostsByDiscussionIDIter provides a mock function with given fields: ctx, discussionID
func (_m *Datastore) GetPostsByDiscussionIDIter(ctx context.Context, discussionID string) datastore.PostIter {
	ret := _m.Called(ctx, discussionID)

	var r0 datastore.PostIter
	if rf, ok := ret.Get(0).(func(context.Context, string) datastore.PostIter); ok {
		r0 = rf(ctx, discussionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(datastore.PostIter)
		}
	}

	return r0
}

// GetPostsConnectionByDiscussionID provides a mock function with given fields: ctx, discussionID, cursor, limit
func (_m *Datastore) GetPostsConnectionByDiscussionID(ctx context.Context, discussionID string, cursor string, limit int) (*model.PostsConnection, error) {
	ret := _m.Called(ctx, discussionID, cursor, limit)

	var r0 *model.PostsConnection
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) *model.PostsConnection); ok {
		r0 = rf(ctx, discussionID, cursor, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PostsConnection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int) error); ok {
		r1 = rf(ctx, discussionID, cursor, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSentDiscussionAccessRequestsByUserID provides a mock function with given fields: ctx, userID
func (_m *Datastore) GetSentDiscussionAccessRequestsByUserID(ctx context.Context, userID string) datastore.DiscussionAccessRequestIter {
	ret := _m.Called(ctx, userID)

	var r0 datastore.DiscussionAccessRequestIter
	if rf, ok := ret.Get(0).(func(context.Context, string) datastore.DiscussionAccessRequestIter); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(datastore.DiscussionAccessRequestIter)
		}
	}

	return r0
}

// GetSocialInfosByUserProfileID provides a mock function with given fields: ctx, userProfileID
func (_m *Datastore) GetSocialInfosByUserProfileID(ctx context.Context, userProfileID string) ([]model.SocialInfo, error) {
	ret := _m.Called(ctx, userProfileID)

	var r0 []model.SocialInfo
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.SocialInfo); ok {
		r0 = rf(ctx, userProfileID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.SocialInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userProfileID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalParticipantCountByDiscussionID provides a mock function with given fields: ctx, discussionID
func (_m *Datastore) GetTotalParticipantCountByDiscussionID(ctx context.Context, discussionID string) int {
	ret := _m.Called(ctx, discussionID)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, discussionID)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetUserByID provides a mock function with given fields: ctx, userID
func (_m *Datastore) GetUserByID(ctx context.Context, userID string) (*model.User, error) {
	ret := _m.Called(ctx, userID)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserDevicesByUserID provides a mock function with given fields: ctx, userID
func (_m *Datastore) GetUserDevicesByUserID(ctx context.Context, userID string) ([]model.UserDevice, error) {
	ret := _m.Called(ctx, userID)

	var r0 []model.UserDevice
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.UserDevice); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.UserDevice)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserProfileByID provides a mock function with given fields: ctx, id
func (_m *Datastore) GetUserProfileByID(ctx context.Context, id string) (*model.UserProfile, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.UserProfile
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.UserProfile); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserProfile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserProfileByUserID provides a mock function with given fields: ctx, userID
func (_m *Datastore) GetUserProfileByUserID(ctx context.Context, userID string) (*model.UserProfile, error) {
	ret := _m.Called(ctx, userID)

	var r0 *model.UserProfile
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.UserProfile); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserProfile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetViewerForDiscussion provides a mock function with given fields: ctx, discussionID, userID
func (_m *Datastore) GetViewerForDiscussion(ctx context.Context, discussionID string, userID string) (*model.Viewer, error) {
	ret := _m.Called(ctx, discussionID, userID)

	var r0 *model.Viewer
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.Viewer); ok {
		r0 = rf(ctx, discussionID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Viewer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, discussionID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetViewersByIDs provides a mock function with given fields: ctx, viewerIDs
func (_m *Datastore) GetViewersByIDs(ctx context.Context, viewerIDs []string) (map[string]*model.Viewer, error) {
	ret := _m.Called(ctx, viewerIDs)

	var r0 map[string]*model.Viewer
	if rf, ok := ret.Get(0).(func(context.Context, []string) map[string]*model.Viewer); ok {
		r0 = rf(ctx, viewerIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*model.Viewer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, viewerIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncrementDiscussionShuffleCount provides a mock function with given fields: ctx, tx, id
func (_m *Datastore) IncrementDiscussionShuffleCount(ctx context.Context, tx *sql.Tx, id string) (*int, error) {
	ret := _m.Called(ctx, tx, id)

	var r0 *int
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, string) *int); ok {
		r0 = rf(ctx, tx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, string) error); ok {
		r1 = rf(ctx, tx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDiscussions provides a mock function with given fields: ctx
func (_m *Datastore) ListDiscussions(ctx context.Context) (*model.DiscussionsConnection, error) {
	ret := _m.Called(ctx)

	var r0 *model.DiscussionsConnection
	if rf, ok := ret.Get(0).(func(context.Context) *model.DiscussionsConnection); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DiscussionsConnection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDiscussionsByUserID provides a mock function with given fields: ctx, userID, state
func (_m *Datastore) ListDiscussionsByUserID(ctx context.Context, userID string, state model.DiscussionUserAccessState) (*model.DiscussionsConnection, error) {
	ret := _m.Called(ctx, userID, state)

	var r0 *model.DiscussionsConnection
	if rf, ok := ret.Get(0).(func(context.Context, string, model.DiscussionUserAccessState) *model.DiscussionsConnection); ok {
		r0 = rf(ctx, userID, state)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DiscussionsConnection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, model.DiscussionUserAccessState) error); ok {
		r1 = rf(ctx, userID, state)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostIterCollect provides a mock function with given fields: ctx, iter
func (_m *Datastore) PostIterCollect(ctx context.Context, iter datastore.PostIter) ([]*model.Post, error) {
	ret := _m.Called(ctx, iter)

	var r0 []*model.Post
	if rf, ok := ret.Get(0).(func(context.Context, datastore.PostIter) []*model.Post); ok {
		r0 = rf(ctx, iter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, datastore.PostIter) error); ok {
		r1 = rf(ctx, iter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutAccessLinkForDiscussion provides a mock function with given fields: ctx, tx, input
func (_m *Datastore) PutAccessLinkForDiscussion(ctx context.Context, tx *sql.Tx, input model.DiscussionAccessLink) (*model.DiscussionAccessLink, error) {
	ret := _m.Called(ctx, tx, input)

	var r0 *model.DiscussionAccessLink
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, model.DiscussionAccessLink) *model.DiscussionAccessLink); ok {
		r0 = rf(ctx, tx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DiscussionAccessLink)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, model.DiscussionAccessLink) error); ok {
		r1 = rf(ctx, tx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutActivity provides a mock function with given fields: ctx, tx, post
func (_m *Datastore) PutActivity(ctx context.Context, tx *sql.Tx, post *model.Post) error {
	ret := _m.Called(ctx, tx, post)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, *model.Post) error); ok {
		r0 = rf(ctx, tx, post)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PutDiscussionAccessRequestRecord provides a mock function with given fields: ctx, tx, request
func (_m *Datastore) PutDiscussionAccessRequestRecord(ctx context.Context, tx *sql.Tx, request model.DiscussionAccessRequest) (*model.DiscussionAccessRequest, error) {
	ret := _m.Called(ctx, tx, request)

	var r0 *model.DiscussionAccessRequest
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, model.DiscussionAccessRequest) *model.DiscussionAccessRequest); ok {
		r0 = rf(ctx, tx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DiscussionAccessRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, model.DiscussionAccessRequest) error); ok {
		r1 = rf(ctx, tx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutMediaRecord provides a mock function with given fields: ctx, tx, media
func (_m *Datastore) PutMediaRecord(ctx context.Context, tx *sql.Tx, media model.Media) error {
	ret := _m.Called(ctx, tx, media)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, model.Media) error); ok {
		r0 = rf(ctx, tx, media)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PutNextShuffleTimeForDiscussionID provides a mock function with given fields: ctx, tx, id, shuffleTime
func (_m *Datastore) PutNextShuffleTimeForDiscussionID(ctx context.Context, tx *sql.Tx, id string, shuffleTime *time.Time) (*model.DiscussionShuffleTime, error) {
	ret := _m.Called(ctx, tx, id, shuffleTime)

	var r0 *model.DiscussionShuffleTime
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, string, *time.Time) *model.DiscussionShuffleTime); ok {
		r0 = rf(ctx, tx, id, shuffleTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DiscussionShuffleTime)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, string, *time.Time) error); ok {
		r1 = rf(ctx, tx, id, shuffleTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutPost provides a mock function with given fields: ctx, tx, post
func (_m *Datastore) PutPost(ctx context.Context, tx *sql.Tx, post model.Post) (*model.Post, error) {
	ret := _m.Called(ctx, tx, post)

	var r0 *model.Post
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, model.Post) *model.Post); ok {
		r0 = rf(ctx, tx, post)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, model.Post) error); ok {
		r1 = rf(ctx, tx, post)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutPostContent provides a mock function with given fields: ctx, tx, postContent
func (_m *Datastore) PutPostContent(ctx context.Context, tx *sql.Tx, postContent model.PostContent) error {
	ret := _m.Called(ctx, tx, postContent)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, model.PostContent) error); ok {
		r0 = rf(ctx, tx, postContent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RollbackTx provides a mock function with given fields: ctx, tx
func (_m *Datastore) RollbackTx(ctx context.Context, tx *sql.Tx) error {
	ret := _m.Called(ctx, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx) error); ok {
		r0 = rf(ctx, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetParticipantsMutedUntil provides a mock function with given fields: ctx, participants, mutedUntil
func (_m *Datastore) SetParticipantsMutedUntil(ctx context.Context, participants []*model.Participant, mutedUntil *time.Time) ([]*model.Participant, error) {
	ret := _m.Called(ctx, participants, mutedUntil)

	var r0 []*model.Participant
	if rf, ok := ret.Get(0).(func(context.Context, []*model.Participant, *time.Time) []*model.Participant); ok {
		r0 = rf(ctx, participants, mutedUntil)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Participant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []*model.Participant, *time.Time) error); ok {
		r1 = rf(ctx, participants, mutedUntil)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetViewerLastPostViewed provides a mock function with given fields: ctx, viewerID, postID, viewedTime
func (_m *Datastore) SetViewerLastPostViewed(ctx context.Context, viewerID string, postID string, viewedTime time.Time) (*model.Viewer, error) {
	ret := _m.Called(ctx, viewerID, postID, viewedTime)

	var r0 *model.Viewer
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Time) *model.Viewer); ok {
		r0 = rf(ctx, viewerID, postID, viewedTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Viewer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, time.Time) error); ok {
		r1 = rf(ctx, viewerID, postID, viewedTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDiscussionAccessRequestRecord provides a mock function with given fields: ctx, tx, request
func (_m *Datastore) UpdateDiscussionAccessRequestRecord(ctx context.Context, tx *sql.Tx, request model.DiscussionAccessRequest) (*model.DiscussionAccessRequest, error) {
	ret := _m.Called(ctx, tx, request)

	var r0 *model.DiscussionAccessRequest
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, model.DiscussionAccessRequest) *model.DiscussionAccessRequest); ok {
		r0 = rf(ctx, tx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DiscussionAccessRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, model.DiscussionAccessRequest) error); ok {
		r1 = rf(ctx, tx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertDiscussion provides a mock function with given fields: ctx, discussion
func (_m *Datastore) UpsertDiscussion(ctx context.Context, discussion model.Discussion) (*model.Discussion, error) {
	ret := _m.Called(ctx, discussion)

	var r0 *model.Discussion
	if rf, ok := ret.Get(0).(func(context.Context, model.Discussion) *model.Discussion); ok {
		r0 = rf(ctx, discussion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Discussion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Discussion) error); ok {
		r1 = rf(ctx, discussion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertDiscussionArchive provides a mock function with given fields: ctx, tx, discArchive
func (_m *Datastore) UpsertDiscussionArchive(ctx context.Context, tx *sql.Tx, discArchive model.DiscussionArchive) (*model.DiscussionArchive, error) {
	ret := _m.Called(ctx, tx, discArchive)

	var r0 *model.DiscussionArchive
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, model.DiscussionArchive) *model.DiscussionArchive); ok {
		r0 = rf(ctx, tx, discArchive)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DiscussionArchive)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, model.DiscussionArchive) error); ok {
		r1 = rf(ctx, tx, discArchive)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertDiscussionUserAccess provides a mock function with given fields: ctx, tx, dua
func (_m *Datastore) UpsertDiscussionUserAccess(ctx context.Context, tx *sql.Tx, dua model.DiscussionUserAccess) (*model.DiscussionUserAccess, error) {
	ret := _m.Called(ctx, tx, dua)

	var r0 *model.DiscussionUserAccess
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, model.DiscussionUserAccess) *model.DiscussionUserAccess); ok {
		r0 = rf(ctx, tx, dua)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DiscussionUserAccess)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, model.DiscussionUserAccess) error); ok {
		r1 = rf(ctx, tx, dua)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertParticipant provides a mock function with given fields: ctx, participant
func (_m *Datastore) UpsertParticipant(ctx context.Context, participant model.Participant) (*model.Participant, error) {
	ret := _m.Called(ctx, participant)

	var r0 *model.Participant
	if rf, ok := ret.Get(0).(func(context.Context, model.Participant) *model.Participant); ok {
		r0 = rf(ctx, participant)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Participant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Participant) error); ok {
		r1 = rf(ctx, participant)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertSocialInfo provides a mock function with given fields: ctx, obj
func (_m *Datastore) UpsertSocialInfo(ctx context.Context, obj model.SocialInfo) (*model.SocialInfo, error) {
	ret := _m.Called(ctx, obj)

	var r0 *model.SocialInfo
	if rf, ok := ret.Get(0).(func(context.Context, model.SocialInfo) *model.SocialInfo); ok {
		r0 = rf(ctx, obj)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.SocialInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.SocialInfo) error); ok {
		r1 = rf(ctx, obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertUser provides a mock function with given fields: ctx, user
func (_m *Datastore) UpsertUser(ctx context.Context, user model.User) (*model.User, error) {
	ret := _m.Called(ctx, user)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, model.User) *model.User); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertUserDevice provides a mock function with given fields: ctx, userDevice
func (_m *Datastore) UpsertUserDevice(ctx context.Context, userDevice model.UserDevice) (*model.UserDevice, error) {
	ret := _m.Called(ctx, userDevice)

	var r0 *model.UserDevice
	if rf, ok := ret.Get(0).(func(context.Context, model.UserDevice) *model.UserDevice); ok {
		r0 = rf(ctx, userDevice)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserDevice)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.UserDevice) error); ok {
		r1 = rf(ctx, userDevice)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertViewer provides a mock function with given fields: ctx, viewer
func (_m *Datastore) UpsertViewer(ctx context.Context, viewer model.Viewer) (*model.Viewer, error) {
	ret := _m.Called(ctx, viewer)

	var r0 *model.Viewer
	if rf, ok := ret.Get(0).(func(context.Context, model.Viewer) *model.Viewer); ok {
		r0 = rf(ctx, viewer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Viewer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Viewer) error); ok {
		r1 = rf(ctx, viewer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
