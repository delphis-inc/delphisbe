// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import datastore "github.com/delphis-inc/delphisbe/internal/datastore"
import mock "github.com/stretchr/testify/mock"
import model "github.com/delphis-inc/delphisbe/graph/model"
import sql "database/sql"
import time "time"

// Datastore is an autogenerated mock type for the Datastore type
type Datastore struct {
	mock.Mock
}

// AccessRequestIterCollect provides a mock function with given fields: ctx, iter
func (_m *Datastore) AccessRequestIterCollect(ctx context.Context, iter datastore.DiscussionAccessRequestIter) ([]*model.DiscussionAccessRequest, error) {
	ret := _m.Called(ctx, iter)

	var r0 []*model.DiscussionAccessRequest
	if rf, ok := ret.Get(0).(func(context.Context, datastore.DiscussionAccessRequestIter) []*model.DiscussionAccessRequest); ok {
		r0 = rf(ctx, iter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.DiscussionAccessRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, datastore.DiscussionAccessRequestIter) error); ok {
		r1 = rf(ctx, iter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssignFlair provides a mock function with given fields: ctx, participant, flairID
func (_m *Datastore) AssignFlair(ctx context.Context, participant model.Participant, flairID *string) (*model.Participant, error) {
	ret := _m.Called(ctx, participant, flairID)

	var r0 *model.Participant
	if rf, ok := ret.Get(0).(func(context.Context, model.Participant, *string) *model.Participant); ok {
		r0 = rf(ctx, participant, flairID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Participant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Participant, *string) error); ok {
		r1 = rf(ctx, participant, flairID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeginTx provides a mock function with given fields: ctx
func (_m *Datastore) BeginTx(ctx context.Context) (*sql.Tx, error) {
	ret := _m.Called(ctx)

	var r0 *sql.Tx
	if rf, ok := ret.Get(0).(func(context.Context) *sql.Tx); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Tx)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommitTx provides a mock function with given fields: ctx, tx
func (_m *Datastore) CommitTx(ctx context.Context, tx *sql.Tx) error {
	ret := _m.Called(ctx, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx) error); ok {
		r0 = rf(ctx, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ContentIterCollect provides a mock function with given fields: ctx, iter
func (_m *Datastore) ContentIterCollect(ctx context.Context, iter datastore.ContentIter) ([]*model.ImportedContent, error) {
	ret := _m.Called(ctx, iter)

	var r0 []*model.ImportedContent
	if rf, ok := ret.Get(0).(func(context.Context, datastore.ContentIter) []*model.ImportedContent); ok {
		r0 = rf(ctx, iter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ImportedContent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, datastore.ContentIter) error); ok {
		r1 = rf(ctx, iter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateModerator provides a mock function with given fields: ctx, moderator
func (_m *Datastore) CreateModerator(ctx context.Context, moderator model.Moderator) (*model.Moderator, error) {
	ret := _m.Called(ctx, moderator)

	var r0 *model.Moderator
	if rf, ok := ret.Get(0).(func(context.Context, model.Moderator) *model.Moderator); ok {
		r0 = rf(ctx, moderator)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Moderator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Moderator) error); ok {
		r1 = rf(ctx, moderator)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrUpdateUserProfile provides a mock function with given fields: ctx, userProfile
func (_m *Datastore) CreateOrUpdateUserProfile(ctx context.Context, userProfile model.UserProfile) (*model.UserProfile, bool, error) {
	ret := _m.Called(ctx, userProfile)

	var r0 *model.UserProfile
	if rf, ok := ret.Get(0).(func(context.Context, model.UserProfile) *model.UserProfile); ok {
		r0 = rf(ctx, userProfile)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserProfile)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(context.Context, model.UserProfile) bool); ok {
		r1 = rf(ctx, userProfile)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, model.UserProfile) error); ok {
		r2 = rf(ctx, userProfile)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeleteAllParticipantPosts provides a mock function with given fields: ctx, discussionID, participantID, deletedReasonCode
func (_m *Datastore) DeleteAllParticipantPosts(ctx context.Context, discussionID string, participantID string, deletedReasonCode model.PostDeletedReason) (int, error) {
	ret := _m.Called(ctx, discussionID, participantID, deletedReasonCode)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, string, string, model.PostDeletedReason) int); ok {
		r0 = rf(ctx, discussionID, participantID, deletedReasonCode)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, model.PostDeletedReason) error); ok {
		r1 = rf(ctx, discussionID, participantID, deletedReasonCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDiscussionFlairTemplatesAccess provides a mock function with given fields: ctx, tx, discussionID, flairTemplateID
func (_m *Datastore) DeleteDiscussionFlairTemplatesAccess(ctx context.Context, tx *sql.Tx, discussionID string, flairTemplateID string) (*model.DiscussionFlairTemplateAccess, error) {
	ret := _m.Called(ctx, tx, discussionID, flairTemplateID)

	var r0 *model.DiscussionFlairTemplateAccess
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, string, string) *model.DiscussionFlairTemplateAccess); ok {
		r0 = rf(ctx, tx, discussionID, flairTemplateID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DiscussionFlairTemplateAccess)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, string, string) error); ok {
		r1 = rf(ctx, tx, discussionID, flairTemplateID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDiscussionTags provides a mock function with given fields: ctx, tx, tag
func (_m *Datastore) DeleteDiscussionTags(ctx context.Context, tx *sql.Tx, tag model.Tag) (*model.Tag, error) {
	ret := _m.Called(ctx, tx, tag)

	var r0 *model.Tag
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, model.Tag) *model.Tag); ok {
		r0 = rf(ctx, tx, tag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Tag)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, model.Tag) error); ok {
		r1 = rf(ctx, tx, tag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDiscussionUserAccess provides a mock function with given fields: ctx, tx, discussionID, userID
func (_m *Datastore) DeleteDiscussionUserAccess(ctx context.Context, tx *sql.Tx, discussionID string, userID string) (*model.DiscussionUserAccess, error) {
	ret := _m.Called(ctx, tx, discussionID, userID)

	var r0 *model.DiscussionUserAccess
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, string, string) *model.DiscussionUserAccess); ok {
		r0 = rf(ctx, tx, discussionID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DiscussionUserAccess)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, string, string) error); ok {
		r1 = rf(ctx, tx, discussionID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePostByID provides a mock function with given fields: ctx, postID, deletedReasonCode
func (_m *Datastore) DeletePostByID(ctx context.Context, postID string, deletedReasonCode model.PostDeletedReason) (*model.Post, error) {
	ret := _m.Called(ctx, postID, deletedReasonCode)

	var r0 *model.Post
	if rf, ok := ret.Get(0).(func(context.Context, string, model.PostDeletedReason) *model.Post); ok {
		r0 = rf(ctx, postID, deletedReasonCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, model.PostDeletedReason) error); ok {
		r1 = rf(ctx, postID, deletedReasonCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DiscussionAutoPostIterCollect provides a mock function with given fields: ctx, iter
func (_m *Datastore) DiscussionAutoPostIterCollect(ctx context.Context, iter datastore.AutoPostDiscussionIter) ([]*model.DiscussionAutoPost, error) {
	ret := _m.Called(ctx, iter)

	var r0 []*model.DiscussionAutoPost
	if rf, ok := ret.Get(0).(func(context.Context, datastore.AutoPostDiscussionIter) []*model.DiscussionAutoPost); ok {
		r0 = rf(ctx, iter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.DiscussionAutoPost)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, datastore.AutoPostDiscussionIter) error); ok {
		r1 = rf(ctx, iter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DiscussionInviteIterCollect provides a mock function with given fields: ctx, iter
func (_m *Datastore) DiscussionInviteIterCollect(ctx context.Context, iter datastore.DiscussionInviteIter) ([]*model.DiscussionInvite, error) {
	ret := _m.Called(ctx, iter)

	var r0 []*model.DiscussionInvite
	if rf, ok := ret.Get(0).(func(context.Context, datastore.DiscussionInviteIter) []*model.DiscussionInvite); ok {
		r0 = rf(ctx, iter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.DiscussionInvite)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, datastore.DiscussionInviteIter) error); ok {
		r1 = rf(ctx, iter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DiscussionIterCollect provides a mock function with given fields: ctx, iter
func (_m *Datastore) DiscussionIterCollect(ctx context.Context, iter datastore.DiscussionIter) ([]*model.Discussion, error) {
	ret := _m.Called(ctx, iter)

	var r0 []*model.Discussion
	if rf, ok := ret.Get(0).(func(context.Context, datastore.DiscussionIter) []*model.Discussion); ok {
		r0 = rf(ctx, iter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Discussion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, datastore.DiscussionIter) error); ok {
		r1 = rf(ctx, iter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FlairTemplatesIterCollect provides a mock function with given fields: ctx, iter
func (_m *Datastore) FlairTemplatesIterCollect(ctx context.Context, iter datastore.DFAIter) ([]*model.FlairTemplate, error) {
	ret := _m.Called(ctx, iter)

	var r0 []*model.FlairTemplate
	if rf, ok := ret.Get(0).(func(context.Context, datastore.DFAIter) []*model.FlairTemplate); ok {
		r0 = rf(ctx, iter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.FlairTemplate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, datastore.DFAIter) error); ok {
		r1 = rf(ctx, iter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDiscussionAccessRequestsByDiscussionID provides a mock function with given fields: ctx, discussionID
func (_m *Datastore) GetDiscussionAccessRequestsByDiscussionID(ctx context.Context, discussionID string) datastore.DiscussionAccessRequestIter {
	ret := _m.Called(ctx, discussionID)

	var r0 datastore.DiscussionAccessRequestIter
	if rf, ok := ret.Get(0).(func(context.Context, string) datastore.DiscussionAccessRequestIter); ok {
		r0 = rf(ctx, discussionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(datastore.DiscussionAccessRequestIter)
		}
	}

	return r0
}

// GetDiscussionByID provides a mock function with given fields: ctx, id
func (_m *Datastore) GetDiscussionByID(ctx context.Context, id string) (*model.Discussion, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.Discussion
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Discussion); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Discussion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDiscussionByModeratorID provides a mock function with given fields: ctx, moderatorID
func (_m *Datastore) GetDiscussionByModeratorID(ctx context.Context, moderatorID string) (*model.Discussion, error) {
	ret := _m.Called(ctx, moderatorID)

	var r0 *model.Discussion
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Discussion); ok {
		r0 = rf(ctx, moderatorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Discussion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, moderatorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDiscussionFlairTemplatesAccessByDiscussionID provides a mock function with given fields: ctx, discussionID
func (_m *Datastore) GetDiscussionFlairTemplatesAccessByDiscussionID(ctx context.Context, discussionID string) datastore.DFAIter {
	ret := _m.Called(ctx, discussionID)

	var r0 datastore.DFAIter
	if rf, ok := ret.Get(0).(func(context.Context, string) datastore.DFAIter); ok {
		r0 = rf(ctx, discussionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(datastore.DFAIter)
		}
	}

	return r0
}

// GetDiscussionInviteByID provides a mock function with given fields: ctx, id
func (_m *Datastore) GetDiscussionInviteByID(ctx context.Context, id string) (*model.DiscussionInvite, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.DiscussionInvite
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.DiscussionInvite); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DiscussionInvite)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDiscussionInvitesByUserIDAndStatus provides a mock function with given fields: ctx, userID, status
func (_m *Datastore) GetDiscussionInvitesByUserIDAndStatus(ctx context.Context, userID string, status model.InviteRequestStatus) datastore.DiscussionInviteIter {
	ret := _m.Called(ctx, userID, status)

	var r0 datastore.DiscussionInviteIter
	if rf, ok := ret.Get(0).(func(context.Context, string, model.InviteRequestStatus) datastore.DiscussionInviteIter); ok {
		r0 = rf(ctx, userID, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(datastore.DiscussionInviteIter)
		}
	}

	return r0
}

// GetDiscussionRequestAccessByID provides a mock function with given fields: ctx, id
func (_m *Datastore) GetDiscussionRequestAccessByID(ctx context.Context, id string) (*model.DiscussionAccessRequest, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.DiscussionAccessRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.DiscussionAccessRequest); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DiscussionAccessRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDiscussionTags provides a mock function with given fields: ctx, id
func (_m *Datastore) GetDiscussionTags(ctx context.Context, id string) datastore.TagIter {
	ret := _m.Called(ctx, id)

	var r0 datastore.TagIter
	if rf, ok := ret.Get(0).(func(context.Context, string) datastore.TagIter); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(datastore.TagIter)
		}
	}

	return r0
}

// GetDiscussionsAutoPost provides a mock function with given fields: ctx
func (_m *Datastore) GetDiscussionsAutoPost(ctx context.Context) datastore.AutoPostDiscussionIter {
	ret := _m.Called(ctx)

	var r0 datastore.AutoPostDiscussionIter
	if rf, ok := ret.Get(0).(func(context.Context) datastore.AutoPostDiscussionIter); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(datastore.AutoPostDiscussionIter)
		}
	}

	return r0
}

// GetDiscussionsByIDs provides a mock function with given fields: ctx, ids
func (_m *Datastore) GetDiscussionsByIDs(ctx context.Context, ids []string) (map[string]*model.Discussion, error) {
	ret := _m.Called(ctx, ids)

	var r0 map[string]*model.Discussion
	if rf, ok := ret.Get(0).(func(context.Context, []string) map[string]*model.Discussion); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*model.Discussion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDiscussionsForFlairTemplateByUserID provides a mock function with given fields: ctx, userID
func (_m *Datastore) GetDiscussionsForFlairTemplateByUserID(ctx context.Context, userID string) datastore.DiscussionIter {
	ret := _m.Called(ctx, userID)

	var r0 datastore.DiscussionIter
	if rf, ok := ret.Get(0).(func(context.Context, string) datastore.DiscussionIter); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(datastore.DiscussionIter)
		}
	}

	return r0
}

// GetDiscussionsForUserAccessByUserID provides a mock function with given fields: ctx, userID
func (_m *Datastore) GetDiscussionsForUserAccessByUserID(ctx context.Context, userID string) datastore.DiscussionIter {
	ret := _m.Called(ctx, userID)

	var r0 datastore.DiscussionIter
	if rf, ok := ret.Get(0).(func(context.Context, string) datastore.DiscussionIter); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(datastore.DiscussionIter)
		}
	}

	return r0
}

// GetFlairByID provides a mock function with given fields: ctx, id
func (_m *Datastore) GetFlairByID(ctx context.Context, id string) (*model.Flair, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.Flair
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Flair); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Flair)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFlairTemplateByID provides a mock function with given fields: ctx, id
func (_m *Datastore) GetFlairTemplateByID(ctx context.Context, id string) (*model.FlairTemplate, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.FlairTemplate
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.FlairTemplate); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.FlairTemplate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFlairsByUserID provides a mock function with given fields: ctx, userID
func (_m *Datastore) GetFlairsByUserID(ctx context.Context, userID string) ([]*model.Flair, error) {
	ret := _m.Called(ctx, userID)

	var r0 []*model.Flair
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.Flair); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Flair)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImportedContentByDiscussionID provides a mock function with given fields: ctx, discussionID, limit
func (_m *Datastore) GetImportedContentByDiscussionID(ctx context.Context, discussionID string, limit int) datastore.ContentIter {
	ret := _m.Called(ctx, discussionID, limit)

	var r0 datastore.ContentIter
	if rf, ok := ret.Get(0).(func(context.Context, string, int) datastore.ContentIter); ok {
		r0 = rf(ctx, discussionID, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(datastore.ContentIter)
		}
	}

	return r0
}

// GetImportedContentByID provides a mock function with given fields: ctx, id
func (_m *Datastore) GetImportedContentByID(ctx context.Context, id string) (*model.ImportedContent, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.ImportedContent
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.ImportedContent); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ImportedContent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImportedContentTags provides a mock function with given fields: ctx, id
func (_m *Datastore) GetImportedContentTags(ctx context.Context, id string) datastore.TagIter {
	ret := _m.Called(ctx, id)

	var r0 datastore.TagIter
	if rf, ok := ret.Get(0).(func(context.Context, string) datastore.TagIter); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(datastore.TagIter)
		}
	}

	return r0
}

// GetInviteLinksByDiscussionID provides a mock function with given fields: ctx, discussionID
func (_m *Datastore) GetInviteLinksByDiscussionID(ctx context.Context, discussionID string) (*model.DiscussionLinkAccess, error) {
	ret := _m.Called(ctx, discussionID)

	var r0 *model.DiscussionLinkAccess
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.DiscussionLinkAccess); ok {
		r0 = rf(ctx, discussionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DiscussionLinkAccess)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, discussionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastPostByDiscussionID provides a mock function with given fields: ctx, discussionID, minutes
func (_m *Datastore) GetLastPostByDiscussionID(ctx context.Context, discussionID string, minutes int) (*model.Post, error) {
	ret := _m.Called(ctx, discussionID, minutes)

	var r0 *model.Post
	if rf, ok := ret.Get(0).(func(context.Context, string, int) *model.Post); ok {
		r0 = rf(ctx, discussionID, minutes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, discussionID, minutes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMatchingTags provides a mock function with given fields: ctx, discussionID, importedContentID
func (_m *Datastore) GetMatchingTags(ctx context.Context, discussionID string, importedContentID string) ([]string, error) {
	ret := _m.Called(ctx, discussionID, importedContentID)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []string); ok {
		r0 = rf(ctx, discussionID, importedContentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, discussionID, importedContentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMediaRecordByID provides a mock function with given fields: ctx, mediaID
func (_m *Datastore) GetMediaRecordByID(ctx context.Context, mediaID string) (*model.Media, error) {
	ret := _m.Called(ctx, mediaID)

	var r0 *model.Media
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Media); ok {
		r0 = rf(ctx, mediaID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Media)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, mediaID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModeratorByID provides a mock function with given fields: ctx, id
func (_m *Datastore) GetModeratorByID(ctx context.Context, id string) (*model.Moderator, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.Moderator
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Moderator); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Moderator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModeratorByUserID provides a mock function with given fields: ctx, id
func (_m *Datastore) GetModeratorByUserID(ctx context.Context, id string) (*model.Moderator, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.Moderator
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Moderator); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Moderator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModeratorByUserIDAndDiscussionID provides a mock function with given fields: ctx, userID, discussionID
func (_m *Datastore) GetModeratorByUserIDAndDiscussionID(ctx context.Context, userID string, discussionID string) (*model.Moderator, error) {
	ret := _m.Called(ctx, userID, discussionID)

	var r0 *model.Moderator
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.Moderator); ok {
		r0 = rf(ctx, userID, discussionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Moderator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, discussionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModeratorParticipantsByDiscussionID provides a mock function with given fields: ctx, discussionID
func (_m *Datastore) GetModeratorParticipantsByDiscussionID(ctx context.Context, discussionID string) ([]model.Participant, error) {
	ret := _m.Called(ctx, discussionID)

	var r0 []model.Participant
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.Participant); ok {
		r0 = rf(ctx, discussionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Participant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, discussionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetParticipantByID provides a mock function with given fields: ctx, participantID
func (_m *Datastore) GetParticipantByID(ctx context.Context, participantID string) (*model.Participant, error) {
	ret := _m.Called(ctx, participantID)

	var r0 *model.Participant
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Participant); ok {
		r0 = rf(ctx, participantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Participant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, participantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetParticipantsByDiscussionID provides a mock function with given fields: ctx, id
func (_m *Datastore) GetParticipantsByDiscussionID(ctx context.Context, id string) ([]model.Participant, error) {
	ret := _m.Called(ctx, id)

	var r0 []model.Participant
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.Participant); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Participant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetParticipantsByDiscussionIDUserID provides a mock function with given fields: ctx, discussionID, userID
func (_m *Datastore) GetParticipantsByDiscussionIDUserID(ctx context.Context, discussionID string, userID string) ([]model.Participant, error) {
	ret := _m.Called(ctx, discussionID, userID)

	var r0 []model.Participant
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []model.Participant); ok {
		r0 = rf(ctx, discussionID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Participant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, discussionID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetParticipantsByIDs provides a mock function with given fields: ctx, ids
func (_m *Datastore) GetParticipantsByIDs(ctx context.Context, ids []string) (map[string]*model.Participant, error) {
	ret := _m.Called(ctx, ids)

	var r0 map[string]*model.Participant
	if rf, ok := ret.Get(0).(func(context.Context, []string) map[string]*model.Participant); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*model.Participant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPostByID provides a mock function with given fields: ctx, postID
func (_m *Datastore) GetPostByID(ctx context.Context, postID string) (*model.Post, error) {
	ret := _m.Called(ctx, postID)

	var r0 *model.Post
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Post); ok {
		r0 = rf(ctx, postID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPostContentByID provides a mock function with given fields: ctx, id
func (_m *Datastore) GetPostContentByID(ctx context.Context, id string) (*model.PostContent, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.PostContent
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.PostContent); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PostContent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPostsByDiscussionIDFromCursorIter provides a mock function with given fields: ctx, discussionID, cursor, limit
func (_m *Datastore) GetPostsByDiscussionIDFromCursorIter(ctx context.Context, discussionID string, cursor string, limit int) datastore.PostIter {
	ret := _m.Called(ctx, discussionID, cursor, limit)

	var r0 datastore.PostIter
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) datastore.PostIter); ok {
		r0 = rf(ctx, discussionID, cursor, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(datastore.PostIter)
		}
	}

	return r0
}

// GetPostsByDiscussionIDIter provides a mock function with given fields: ctx, discussionID
func (_m *Datastore) GetPostsByDiscussionIDIter(ctx context.Context, discussionID string) datastore.PostIter {
	ret := _m.Called(ctx, discussionID)

	var r0 datastore.PostIter
	if rf, ok := ret.Get(0).(func(context.Context, string) datastore.PostIter); ok {
		r0 = rf(ctx, discussionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(datastore.PostIter)
		}
	}

	return r0
}

// GetPostsConnectionByDiscussionID provides a mock function with given fields: ctx, discussionID, cursor, limit
func (_m *Datastore) GetPostsConnectionByDiscussionID(ctx context.Context, discussionID string, cursor string, limit int) (*model.PostsConnection, error) {
	ret := _m.Called(ctx, discussionID, cursor, limit)

	var r0 *model.PostsConnection
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) *model.PostsConnection); ok {
		r0 = rf(ctx, discussionID, cursor, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PostsConnection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int) error); ok {
		r1 = rf(ctx, discussionID, cursor, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPublicDiscussions provides a mock function with given fields: ctx
func (_m *Datastore) GetPublicDiscussions(ctx context.Context) datastore.DiscussionIter {
	ret := _m.Called(ctx)

	var r0 datastore.DiscussionIter
	if rf, ok := ret.Get(0).(func(context.Context) datastore.DiscussionIter); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(datastore.DiscussionIter)
		}
	}

	return r0
}

// GetScheduledImportedContentByDiscussionID provides a mock function with given fields: ctx, discussionID
func (_m *Datastore) GetScheduledImportedContentByDiscussionID(ctx context.Context, discussionID string) datastore.ContentIter {
	ret := _m.Called(ctx, discussionID)

	var r0 datastore.ContentIter
	if rf, ok := ret.Get(0).(func(context.Context, string) datastore.ContentIter); ok {
		r0 = rf(ctx, discussionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(datastore.ContentIter)
		}
	}

	return r0
}

// GetSentDiscussionAccessRequestsByUserID provides a mock function with given fields: ctx, userID
func (_m *Datastore) GetSentDiscussionAccessRequestsByUserID(ctx context.Context, userID string) datastore.DiscussionAccessRequestIter {
	ret := _m.Called(ctx, userID)

	var r0 datastore.DiscussionAccessRequestIter
	if rf, ok := ret.Get(0).(func(context.Context, string) datastore.DiscussionAccessRequestIter); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(datastore.DiscussionAccessRequestIter)
		}
	}

	return r0
}

// GetSentDiscussionInvitesByUserID provides a mock function with given fields: ctx, userID
func (_m *Datastore) GetSentDiscussionInvitesByUserID(ctx context.Context, userID string) datastore.DiscussionInviteIter {
	ret := _m.Called(ctx, userID)

	var r0 datastore.DiscussionInviteIter
	if rf, ok := ret.Get(0).(func(context.Context, string) datastore.DiscussionInviteIter); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(datastore.DiscussionInviteIter)
		}
	}

	return r0
}

// GetSocialInfosByUserProfileID provides a mock function with given fields: ctx, userProfileID
func (_m *Datastore) GetSocialInfosByUserProfileID(ctx context.Context, userProfileID string) ([]model.SocialInfo, error) {
	ret := _m.Called(ctx, userProfileID)

	var r0 []model.SocialInfo
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.SocialInfo); ok {
		r0 = rf(ctx, userProfileID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.SocialInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userProfileID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalParticipantCountByDiscussionID provides a mock function with given fields: ctx, discussionID
func (_m *Datastore) GetTotalParticipantCountByDiscussionID(ctx context.Context, discussionID string) int {
	ret := _m.Called(ctx, discussionID)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, discussionID)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetUserByID provides a mock function with given fields: ctx, userID
func (_m *Datastore) GetUserByID(ctx context.Context, userID string) (*model.User, error) {
	ret := _m.Called(ctx, userID)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserDevicesByUserID provides a mock function with given fields: ctx, userID
func (_m *Datastore) GetUserDevicesByUserID(ctx context.Context, userID string) ([]model.UserDevice, error) {
	ret := _m.Called(ctx, userID)

	var r0 []model.UserDevice
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.UserDevice); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.UserDevice)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserProfileByID provides a mock function with given fields: ctx, id
func (_m *Datastore) GetUserProfileByID(ctx context.Context, id string) (*model.UserProfile, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.UserProfile
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.UserProfile); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserProfile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserProfileByUserID provides a mock function with given fields: ctx, userID
func (_m *Datastore) GetUserProfileByUserID(ctx context.Context, userID string) (*model.UserProfile, error) {
	ret := _m.Called(ctx, userID)

	var r0 *model.UserProfile
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.UserProfile); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserProfile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetViewersByIDs provides a mock function with given fields: ctx, viewerIDs
func (_m *Datastore) GetViewersByIDs(ctx context.Context, viewerIDs []string) (map[string]*model.Viewer, error) {
	ret := _m.Called(ctx, viewerIDs)

	var r0 map[string]*model.Viewer
	if rf, ok := ret.Get(0).(func(context.Context, []string) map[string]*model.Viewer); ok {
		r0 = rf(ctx, viewerIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*model.Viewer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, viewerIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDiscussions provides a mock function with given fields: ctx
func (_m *Datastore) ListDiscussions(ctx context.Context) (*model.DiscussionsConnection, error) {
	ret := _m.Called(ctx)

	var r0 *model.DiscussionsConnection
	if rf, ok := ret.Get(0).(func(context.Context) *model.DiscussionsConnection); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DiscussionsConnection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDiscussionsByUserID provides a mock function with given fields: ctx, userID
func (_m *Datastore) ListDiscussionsByUserID(ctx context.Context, userID string) (*model.DiscussionsConnection, error) {
	ret := _m.Called(ctx, userID)

	var r0 *model.DiscussionsConnection
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.DiscussionsConnection); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DiscussionsConnection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFlairTemplates provides a mock function with given fields: ctx, query
func (_m *Datastore) ListFlairTemplates(ctx context.Context, query *string) ([]*model.FlairTemplate, error) {
	ret := _m.Called(ctx, query)

	var r0 []*model.FlairTemplate
	if rf, ok := ret.Get(0).(func(context.Context, *string) []*model.FlairTemplate); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.FlairTemplate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *string) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostIterCollect provides a mock function with given fields: ctx, iter
func (_m *Datastore) PostIterCollect(ctx context.Context, iter datastore.PostIter) ([]*model.Post, error) {
	ret := _m.Called(ctx, iter)

	var r0 []*model.Post
	if rf, ok := ret.Get(0).(func(context.Context, datastore.PostIter) []*model.Post); ok {
		r0 = rf(ctx, iter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, datastore.PostIter) error); ok {
		r1 = rf(ctx, iter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutActivity provides a mock function with given fields: ctx, tx, post
func (_m *Datastore) PutActivity(ctx context.Context, tx *sql.Tx, post *model.Post) error {
	ret := _m.Called(ctx, tx, post)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, *model.Post) error); ok {
		r0 = rf(ctx, tx, post)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PutDiscussionAccessRequestRecord provides a mock function with given fields: ctx, tx, request
func (_m *Datastore) PutDiscussionAccessRequestRecord(ctx context.Context, tx *sql.Tx, request model.DiscussionAccessRequest) (*model.DiscussionAccessRequest, error) {
	ret := _m.Called(ctx, tx, request)

	var r0 *model.DiscussionAccessRequest
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, model.DiscussionAccessRequest) *model.DiscussionAccessRequest); ok {
		r0 = rf(ctx, tx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DiscussionAccessRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, model.DiscussionAccessRequest) error); ok {
		r1 = rf(ctx, tx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutDiscussionInviteRecord provides a mock function with given fields: ctx, tx, invite
func (_m *Datastore) PutDiscussionInviteRecord(ctx context.Context, tx *sql.Tx, invite model.DiscussionInvite) (*model.DiscussionInvite, error) {
	ret := _m.Called(ctx, tx, invite)

	var r0 *model.DiscussionInvite
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, model.DiscussionInvite) *model.DiscussionInvite); ok {
		r0 = rf(ctx, tx, invite)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DiscussionInvite)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, model.DiscussionInvite) error); ok {
		r1 = rf(ctx, tx, invite)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutDiscussionTags provides a mock function with given fields: ctx, tx, tag
func (_m *Datastore) PutDiscussionTags(ctx context.Context, tx *sql.Tx, tag model.Tag) (*model.Tag, error) {
	ret := _m.Called(ctx, tx, tag)

	var r0 *model.Tag
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, model.Tag) *model.Tag); ok {
		r0 = rf(ctx, tx, tag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Tag)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, model.Tag) error); ok {
		r1 = rf(ctx, tx, tag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutImportedContent provides a mock function with given fields: ctx, tx, ic
func (_m *Datastore) PutImportedContent(ctx context.Context, tx *sql.Tx, ic model.ImportedContent) (*model.ImportedContent, error) {
	ret := _m.Called(ctx, tx, ic)

	var r0 *model.ImportedContent
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, model.ImportedContent) *model.ImportedContent); ok {
		r0 = rf(ctx, tx, ic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ImportedContent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, model.ImportedContent) error); ok {
		r1 = rf(ctx, tx, ic)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutImportedContentDiscussionQueue provides a mock function with given fields: ctx, discussionID, contentID, postedAt, matchingTags
func (_m *Datastore) PutImportedContentDiscussionQueue(ctx context.Context, discussionID string, contentID string, postedAt *time.Time, matchingTags []string) (*model.ContentQueueRecord, error) {
	ret := _m.Called(ctx, discussionID, contentID, postedAt, matchingTags)

	var r0 *model.ContentQueueRecord
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *time.Time, []string) *model.ContentQueueRecord); ok {
		r0 = rf(ctx, discussionID, contentID, postedAt, matchingTags)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ContentQueueRecord)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *time.Time, []string) error); ok {
		r1 = rf(ctx, discussionID, contentID, postedAt, matchingTags)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutImportedContentTags provides a mock function with given fields: ctx, tx, tag
func (_m *Datastore) PutImportedContentTags(ctx context.Context, tx *sql.Tx, tag model.Tag) (*model.Tag, error) {
	ret := _m.Called(ctx, tx, tag)

	var r0 *model.Tag
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, model.Tag) *model.Tag); ok {
		r0 = rf(ctx, tx, tag)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Tag)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, model.Tag) error); ok {
		r1 = rf(ctx, tx, tag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutMediaRecord provides a mock function with given fields: ctx, tx, media
func (_m *Datastore) PutMediaRecord(ctx context.Context, tx *sql.Tx, media model.Media) error {
	ret := _m.Called(ctx, tx, media)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, model.Media) error); ok {
		r0 = rf(ctx, tx, media)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PutPost provides a mock function with given fields: ctx, tx, post
func (_m *Datastore) PutPost(ctx context.Context, tx *sql.Tx, post model.Post) (*model.Post, error) {
	ret := _m.Called(ctx, tx, post)

	var r0 *model.Post
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, model.Post) *model.Post); ok {
		r0 = rf(ctx, tx, post)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, model.Post) error); ok {
		r1 = rf(ctx, tx, post)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutPostContent provides a mock function with given fields: ctx, tx, postContent
func (_m *Datastore) PutPostContent(ctx context.Context, tx *sql.Tx, postContent model.PostContent) error {
	ret := _m.Called(ctx, tx, postContent)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, model.PostContent) error); ok {
		r0 = rf(ctx, tx, postContent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveFlair provides a mock function with given fields: ctx, flair
func (_m *Datastore) RemoveFlair(ctx context.Context, flair model.Flair) (*model.Flair, error) {
	ret := _m.Called(ctx, flair)

	var r0 *model.Flair
	if rf, ok := ret.Get(0).(func(context.Context, model.Flair) *model.Flair); ok {
		r0 = rf(ctx, flair)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Flair)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Flair) error); ok {
		r1 = rf(ctx, flair)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveFlairTemplate provides a mock function with given fields: ctx, flairTemplate
func (_m *Datastore) RemoveFlairTemplate(ctx context.Context, flairTemplate model.FlairTemplate) (*model.FlairTemplate, error) {
	ret := _m.Called(ctx, flairTemplate)

	var r0 *model.FlairTemplate
	if rf, ok := ret.Get(0).(func(context.Context, model.FlairTemplate) *model.FlairTemplate); ok {
		r0 = rf(ctx, flairTemplate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.FlairTemplate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.FlairTemplate) error); ok {
		r1 = rf(ctx, flairTemplate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RollbackTx provides a mock function with given fields: ctx, tx
func (_m *Datastore) RollbackTx(ctx context.Context, tx *sql.Tx) error {
	ret := _m.Called(ctx, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx) error); ok {
		r0 = rf(ctx, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TagIterCollect provides a mock function with given fields: ctx, iter
func (_m *Datastore) TagIterCollect(ctx context.Context, iter datastore.TagIter) ([]*model.Tag, error) {
	ret := _m.Called(ctx, iter)

	var r0 []*model.Tag
	if rf, ok := ret.Get(0).(func(context.Context, datastore.TagIter) []*model.Tag); ok {
		r0 = rf(ctx, iter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Tag)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, datastore.TagIter) error); ok {
		r1 = rf(ctx, iter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDiscussionAccessRequestRecord provides a mock function with given fields: ctx, tx, request
func (_m *Datastore) UpdateDiscussionAccessRequestRecord(ctx context.Context, tx *sql.Tx, request model.DiscussionAccessRequest) (*model.DiscussionAccessRequest, error) {
	ret := _m.Called(ctx, tx, request)

	var r0 *model.DiscussionAccessRequest
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, model.DiscussionAccessRequest) *model.DiscussionAccessRequest); ok {
		r0 = rf(ctx, tx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DiscussionAccessRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, model.DiscussionAccessRequest) error); ok {
		r1 = rf(ctx, tx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDiscussionInviteRecord provides a mock function with given fields: ctx, tx, invite
func (_m *Datastore) UpdateDiscussionInviteRecord(ctx context.Context, tx *sql.Tx, invite model.DiscussionInvite) (*model.DiscussionInvite, error) {
	ret := _m.Called(ctx, tx, invite)

	var r0 *model.DiscussionInvite
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, model.DiscussionInvite) *model.DiscussionInvite); ok {
		r0 = rf(ctx, tx, invite)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DiscussionInvite)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, model.DiscussionInvite) error); ok {
		r1 = rf(ctx, tx, invite)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateImportedContentDiscussionQueue provides a mock function with given fields: ctx, discussionID, contentID, postedAt
func (_m *Datastore) UpdateImportedContentDiscussionQueue(ctx context.Context, discussionID string, contentID string, postedAt *time.Time) (*model.ContentQueueRecord, error) {
	ret := _m.Called(ctx, discussionID, contentID, postedAt)

	var r0 *model.ContentQueueRecord
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *time.Time) *model.ContentQueueRecord); ok {
		r0 = rf(ctx, discussionID, contentID, postedAt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ContentQueueRecord)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *time.Time) error); ok {
		r1 = rf(ctx, discussionID, contentID, postedAt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertDiscussion provides a mock function with given fields: ctx, discussion
func (_m *Datastore) UpsertDiscussion(ctx context.Context, discussion model.Discussion) (*model.Discussion, error) {
	ret := _m.Called(ctx, discussion)

	var r0 *model.Discussion
	if rf, ok := ret.Get(0).(func(context.Context, model.Discussion) *model.Discussion); ok {
		r0 = rf(ctx, discussion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Discussion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Discussion) error); ok {
		r1 = rf(ctx, discussion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertDiscussionFlairTemplatesAccess provides a mock function with given fields: ctx, tx, discussionID, flairTemplateID
func (_m *Datastore) UpsertDiscussionFlairTemplatesAccess(ctx context.Context, tx *sql.Tx, discussionID string, flairTemplateID string) (*model.DiscussionFlairTemplateAccess, error) {
	ret := _m.Called(ctx, tx, discussionID, flairTemplateID)

	var r0 *model.DiscussionFlairTemplateAccess
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, string, string) *model.DiscussionFlairTemplateAccess); ok {
		r0 = rf(ctx, tx, discussionID, flairTemplateID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DiscussionFlairTemplateAccess)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, string, string) error); ok {
		r1 = rf(ctx, tx, discussionID, flairTemplateID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertDiscussionUserAccess provides a mock function with given fields: ctx, tx, discussionID, userID
func (_m *Datastore) UpsertDiscussionUserAccess(ctx context.Context, tx *sql.Tx, discussionID string, userID string) (*model.DiscussionUserAccess, error) {
	ret := _m.Called(ctx, tx, discussionID, userID)

	var r0 *model.DiscussionUserAccess
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, string, string) *model.DiscussionUserAccess); ok {
		r0 = rf(ctx, tx, discussionID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DiscussionUserAccess)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, string, string) error); ok {
		r1 = rf(ctx, tx, discussionID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertFlair provides a mock function with given fields: ctx, flair
func (_m *Datastore) UpsertFlair(ctx context.Context, flair model.Flair) (*model.Flair, error) {
	ret := _m.Called(ctx, flair)

	var r0 *model.Flair
	if rf, ok := ret.Get(0).(func(context.Context, model.Flair) *model.Flair); ok {
		r0 = rf(ctx, flair)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Flair)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Flair) error); ok {
		r1 = rf(ctx, flair)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertFlairTemplate provides a mock function with given fields: ctx, flairTemplate
func (_m *Datastore) UpsertFlairTemplate(ctx context.Context, flairTemplate model.FlairTemplate) (*model.FlairTemplate, error) {
	ret := _m.Called(ctx, flairTemplate)

	var r0 *model.FlairTemplate
	if rf, ok := ret.Get(0).(func(context.Context, model.FlairTemplate) *model.FlairTemplate); ok {
		r0 = rf(ctx, flairTemplate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.FlairTemplate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.FlairTemplate) error); ok {
		r1 = rf(ctx, flairTemplate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertInviteLinksByDiscussionID provides a mock function with given fields: ctx, tx, input
func (_m *Datastore) UpsertInviteLinksByDiscussionID(ctx context.Context, tx *sql.Tx, input model.DiscussionLinkAccess) (*model.DiscussionLinkAccess, error) {
	ret := _m.Called(ctx, tx, input)

	var r0 *model.DiscussionLinkAccess
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, model.DiscussionLinkAccess) *model.DiscussionLinkAccess); ok {
		r0 = rf(ctx, tx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DiscussionLinkAccess)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, model.DiscussionLinkAccess) error); ok {
		r1 = rf(ctx, tx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertParticipant provides a mock function with given fields: ctx, participant
func (_m *Datastore) UpsertParticipant(ctx context.Context, participant model.Participant) (*model.Participant, error) {
	ret := _m.Called(ctx, participant)

	var r0 *model.Participant
	if rf, ok := ret.Get(0).(func(context.Context, model.Participant) *model.Participant); ok {
		r0 = rf(ctx, participant)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Participant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Participant) error); ok {
		r1 = rf(ctx, participant)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertSocialInfo provides a mock function with given fields: ctx, obj
func (_m *Datastore) UpsertSocialInfo(ctx context.Context, obj model.SocialInfo) (*model.SocialInfo, error) {
	ret := _m.Called(ctx, obj)

	var r0 *model.SocialInfo
	if rf, ok := ret.Get(0).(func(context.Context, model.SocialInfo) *model.SocialInfo); ok {
		r0 = rf(ctx, obj)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.SocialInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.SocialInfo) error); ok {
		r1 = rf(ctx, obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertUser provides a mock function with given fields: ctx, user
func (_m *Datastore) UpsertUser(ctx context.Context, user model.User) (*model.User, error) {
	ret := _m.Called(ctx, user)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, model.User) *model.User); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertUserDevice provides a mock function with given fields: ctx, userDevice
func (_m *Datastore) UpsertUserDevice(ctx context.Context, userDevice model.UserDevice) (*model.UserDevice, error) {
	ret := _m.Called(ctx, userDevice)

	var r0 *model.UserDevice
	if rf, ok := ret.Get(0).(func(context.Context, model.UserDevice) *model.UserDevice); ok {
		r0 = rf(ctx, userDevice)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserDevice)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.UserDevice) error); ok {
		r1 = rf(ctx, userDevice)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertViewer provides a mock function with given fields: ctx, viewer
func (_m *Datastore) UpsertViewer(ctx context.Context, viewer model.Viewer) (*model.Viewer, error) {
	ret := _m.Called(ctx, viewer)

	var r0 *model.Viewer
	if rf, ok := ret.Get(0).(func(context.Context, model.Viewer) *model.Viewer); ok {
		r0 = rf(ctx, viewer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Viewer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Viewer) error); ok {
		r1 = rf(ctx, viewer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
